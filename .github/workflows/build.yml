name: Build AvisemeEmailer (.NET 8)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'SITECOM/AvisemeEmailer/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'SITECOM/AvisemeEmailer/**'
  workflow_dispatch:

jobs:

  pre-actions:
    name: Pre Actions
    runs-on: ubuntu-latest
    steps:
      - name: Contexto
        run: |
          echo "üîß Iniciando pipeline AvisemeEmailer..."
          echo "üì¶ Batch execut√°vel para notifica√ß√£o de produtos em estoque"

  open-ssh-port:
    name: Abrir porta SSH AWS (22)
    runs-on: ubuntu-latest
    needs: pre-actions
    steps:
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Abrir porta SSH temporariamente
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.BASTION_SG_ID }} \
          --protocol tcp --port 22 --cidr 0.0.0.0/0 || echo "‚ö†Ô∏è Regra j√° existente"

  build:
    name: Build (.NET 8)
    runs-on: ubuntu-latest
    needs: pre-actions
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Instalar .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar depend√™ncias
        working-directory: SITECOM/AvisemeEmailer
        run: dotnet restore AvisemeEmailer.csproj

      - name: Compilar o projeto
        working-directory: SITECOM/AvisemeEmailer
        run: dotnet build AvisemeEmailer.csproj --configuration Release --no-restore

      - name: Publicar (gera o execut√°vel pronto para Linux)
        working-directory: SITECOM/AvisemeEmailer
        run: dotnet publish AvisemeEmailer.csproj -c Release -r linux-x64 -o ../../publish --self-contained false

      - name: Remover appsettings de desenvolvimento
        run: |
          if [ -f "publish/appsettings.Development.json" ]; then
            rm -f publish/appsettings.Development.json
            echo "‚úÖ appsettings.Development.json removido"
          fi

      - name: Criar arquivo de informa√ß√µes do build
        run: |
          cat > publish/BUILD_INFO.txt <<EOF
          Build: ${{ github.run_number }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Data: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Autor: ${{ github.actor }}
          EOF

      - name: Compactar o resultado
        run: |
          cd publish
          zip -r ../aviseme-emailer.zip .
          cd ..
          ls -lh aviseme-emailer.zip

      - name: Armazenar artefato no GitHub
        uses: actions/upload-artifact@v4
        with:
          name: AvisemeEmailer
          path: aviseme-emailer.zip
          retention-days: 30

  transfer-bastion:
    name: Transfer para Bastion
    runs-on: ubuntu-latest
    needs: [ build, open-ssh-port ]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: AvisemeEmailer

      - name: Verificar arquivo baixado
        run: |
          echo "=== Conte√∫do do diret√≥rio atual ==="
          pwd
          ls -la
          echo ""
          echo "=== Verificando arquivo espec√≠fico ==="
          if [ -f "aviseme-emailer.zip" ]; then
            ls -lh aviseme-emailer.zip
            echo "‚úÖ Arquivo encontrado!"
          else
            echo "‚ùå Arquivo aviseme-emailer.zip N√ÉO encontrado!"
            echo "Procurando arquivos .zip:"
            find . -name "*.zip" -type f
          fi

      - name: Enviar artefato para o Bastion
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USERNAME }}
          key: ${{ secrets.BASTION_SSH_KEY }}
          source: "aviseme-emailer.zip"
          target: "/home/ec2-user/deploys/"

  deploy-bastion:
    name: Deploy no Bastion
    runs-on: ubuntu-latest
    needs: transfer-bastion
    steps:
      - name: Descompactar e configurar no Bastion
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USERNAME }}
          key: ${{ secrets.BASTION_SSH_KEY }}
          script_stop: false
          script: |
            set -e
            echo "=========================================="
            echo "  Deploy AvisemeEmailer no Bastion"
            echo "=========================================="
            
            DEPLOY_ZIP="/home/ec2-user/deploys/aviseme-emailer.zip"
            TARGET_DIR="$HOME/AVISEME"
            BACKUP_DIR="$HOME/AVISEME-backup-$(date +%Y%m%d-%H%M%S)"
            
            # Verificar se arquivo foi enviado
            if [ ! -f "$DEPLOY_ZIP" ]; then
              echo "‚ùå Arquivo $DEPLOY_ZIP n√£o encontrado!"
              exit 1
            fi
            
            echo "‚úÖ Arquivo encontrado: $DEPLOY_ZIP"
            ls -lh "$DEPLOY_ZIP"
            
            # Fazer backup da vers√£o anterior (se existir)
            if [ -d "$TARGET_DIR" ]; then
              echo "üì¶ Criando backup da vers√£o anterior..."
              sudo cp -r "$TARGET_DIR" "$BACKUP_DIR"
              echo "‚úÖ Backup criado em: $BACKUP_DIR"
            fi
            
            # Criar diret√≥rio de destino
            echo "üìÅ Preparando diret√≥rio $TARGET_DIR..."
            mkdir -p "$TARGET_DIR"
            
            # Limpar diret√≥rio (manter appsettings.json se existir)
            if [ -f "$TARGET_DIR/appsettings.json" ]; then
              echo "üíæ Salvando appsettings.json existente..."
              cp "$TARGET_DIR/appsettings.json" /tmp/appsettings.json.bak
            fi
            
            # Limpar arquivos antigos
            echo "üßπ Limpando arquivos antigos..."
            rm -rf "$TARGET_DIR"/*
            
            # Extrair novo pacote
            echo "üì¶ Extraindo pacote..."
            unzip -o "$DEPLOY_ZIP" -d "$TARGET_DIR"
            
            # Restaurar appsettings.json se existir backup
            if [ -f "/tmp/appsettings.json.bak" ]; then
              echo "‚ôªÔ∏è Restaurando appsettings.json..."
              cp /tmp/appsettings.json.bak "$TARGET_DIR/appsettings.json"
              rm /tmp/appsettings.json.bak
            fi
            
            # Ajustar permiss√µes
            echo "üîê Ajustando permiss√µes..."
            chmod +x "$TARGET_DIR/AvisemeEmailer"
            
            # Verificar instala√ß√£o
            echo ""
            echo "=========================================="
            echo "  ‚úÖ Deploy conclu√≠do com sucesso!"
            echo "=========================================="
            echo ""
            echo "üìÇ Localiza√ß√£o: $TARGET_DIR"
            echo "üìã Arquivos instalados:"
            ls -lh "$TARGET_DIR" | head -20
            echo ""
            
            # Mostrar informa√ß√µes do build
            if [ -f "$TARGET_DIR/BUILD_INFO.txt" ]; then
              echo "üìù Informa√ß√µes do Build:"
              cat "$TARGET_DIR/BUILD_INFO.txt"
              echo ""
            fi
            
            # Verificar se .NET est√° instalado
            if command -v dotnet &> /dev/null; then
              echo "‚úÖ .NET Runtime instalado: $(dotnet --version)"
            else
              echo "‚ö†Ô∏è .NET Runtime n√£o encontrado!"
              echo "   Instale com: sudo dnf install dotnet-runtime-8.0 -y"
            fi
            
            echo ""
            echo "=========================================="
            echo "  üìã Como executar:"
            echo "=========================================="
            echo "  cd ~/AVISEME"
            echo "  dotnet AvisemeEmailer.dll"
            echo ""
            echo "  Ou configure no cron:"
            echo "  0 9 * * * cd ~/AVISEME && /usr/bin/dotnet AvisemeEmailer.dll >> ~/AVISEME/aviseme.log 2>&1"
            echo "=========================================="

  close-ssh-port:
    name: Fechar porta SSH AWS (22)
    runs-on: ubuntu-latest
    needs: [ open-ssh-port, deploy-bastion ]
    if: always()
    steps:
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fechar porta SSH
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.BASTION_SG_ID }} \
            --protocol tcp --port 22 --cidr 0.0.0.0/0 || echo "‚ö†Ô∏è Regra j√° removida"

  post-actions:
    name: Post Actions
    runs-on: ubuntu-latest
    needs: [ build, transfer-bastion, deploy-bastion, close-ssh-port ]
    if: always()
    steps:
      - name: Resumo
        run: |
          echo "=========================================="
          echo "  üèÅ Pipeline AvisemeEmailer Finalizado"
          echo "=========================================="
          echo ""
          echo "üìä Status dos Jobs:"
          echo "  build: ${{ needs.build.result }}"
          echo "  transfer-bastion: ${{ needs['transfer-bastion'].result }}"
          echo "  deploy-bastion: ${{ needs['deploy-bastion'].result }}"
          echo "  close-ssh-port: ${{ needs['close-ssh-port'].result }}"
          echo ""
          echo "=========================================="
          
          if [ "${{ needs.build.result }}" == "success" ] && \
             [ "${{ needs['transfer-bastion'].result }}" == "success" ] && \
             [ "${{ needs['deploy-bastion'].result }}" == "success" ]; then
            echo "‚úÖ Deploy conclu√≠do com sucesso!"
            echo "üìÇ Aplica√ß√£o dispon√≠vel em: /opt/aviseme-emailer"
            echo "üöÄ Execute manualmente ou configure no cron"
          else
            echo "‚ùå Pipeline teve falhas. Verifique os logs acima."
          fi

